//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.18052
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserWallPaper.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageFileInfo", Namespace="http://schemas.datacontract.org/2004/07/_0624Server")]
    [System.SerializableAttribute()]
    public partial class StorageFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long Sizek__BackingFieldField;
        
        private System.DateTime Timek__BackingFieldField;
        
        private string VirtualPathk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Size>k__BackingField", IsRequired=true)]
        public long Sizek__BackingField {
            get {
                return this.Sizek__BackingFieldField;
            }
            set {
                if ((this.Sizek__BackingFieldField.Equals(value) != true)) {
                    this.Sizek__BackingFieldField = value;
                    this.RaisePropertyChanged("Sizek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Time>k__BackingField", IsRequired=true)]
        public System.DateTime Timek__BackingField {
            get {
                return this.Timek__BackingFieldField;
            }
            set {
                if ((this.Timek__BackingFieldField.Equals(value) != true)) {
                    this.Timek__BackingFieldField = value;
                    this.RaisePropertyChanged("Timek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<VirtualPath>k__BackingField", IsRequired=true)]
        public string VirtualPathk__BackingField {
            get {
                return this.VirtualPathk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.VirtualPathk__BackingFieldField, value) != true)) {
                    this.VirtualPathk__BackingFieldField = value;
                    this.RaisePropertyChanged("VirtualPathk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISIU", CallbackContract=typeof(UserWallPaper.ServiceReference1.ISIUCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISIU {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Join", ReplyAction="http://tempuri.org/ISIU/JoinResponse")]
        string[] Join(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Join", ReplyAction="http://tempuri.org/ISIU/JoinResponse")]
        System.Threading.Tasks.Task<string[]> JoinAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/MyType", ReplyAction="http://tempuri.org/ISIU/MyTypeResponse")]
        string MyType(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/MyType", ReplyAction="http://tempuri.org/ISIU/MyTypeResponse")]
        System.Threading.Tasks.Task<string> MyTypeAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/MyName", ReplyAction="http://tempuri.org/ISIU/MyNameResponse")]
        string MyName(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/MyName", ReplyAction="http://tempuri.org/ISIU/MyNameResponse")]
        System.Threading.Tasks.Task<string> MyNameAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MyBook")]
        void MyBook(string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MyBook")]
        System.Threading.Tasks.Task MyBookAsync(string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISIU/Say")]
        void Say(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISIU/Say")]
        System.Threading.Tasks.Task SayAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Save", ReplyAction="http://tempuri.org/ISIU/SaveResponse")]
        bool Save(string serial, string id, string pw, string name, string sort, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Save", ReplyAction="http://tempuri.org/ISIU/SaveResponse")]
        System.Threading.Tasks.Task<bool> SaveAsync(string serial, string id, string pw, string name, string sort, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Find", ReplyAction="http://tempuri.org/ISIU/FindResponse")]
        bool Find(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Find", ReplyAction="http://tempuri.org/ISIU/FindResponse")]
        System.Threading.Tasks.Task<bool> FindAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindName", ReplyAction="http://tempuri.org/ISIU/FindNameResponse")]
        string FindName(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindName", ReplyAction="http://tempuri.org/ISIU/FindNameResponse")]
        System.Threading.Tasks.Task<string> FindNameAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindType", ReplyAction="http://tempuri.org/ISIU/FindTypeResponse")]
        string FindType(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindType", ReplyAction="http://tempuri.org/ISIU/FindTypeResponse")]
        System.Threading.Tasks.Task<string> FindTypeAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindUserInfo", ReplyAction="http://tempuri.org/ISIU/FindUserInfoResponse")]
        string FindUserInfo(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindUserInfo", ReplyAction="http://tempuri.org/ISIU/FindUserInfoResponse")]
        System.Threading.Tasks.Task<string> FindUserInfoAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Rejoin", ReplyAction="http://tempuri.org/ISIU/RejoinResponse")]
        bool Rejoin(string serial, string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Rejoin", ReplyAction="http://tempuri.org/ISIU/RejoinResponse")]
        System.Threading.Tasks.Task<bool> RejoinAsync(string serial, string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Login", ReplyAction="http://tempuri.org/ISIU/LoginResponse")]
        bool Login(string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Login", ReplyAction="http://tempuri.org/ISIU/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindtoID", ReplyAction="http://tempuri.org/ISIU/FindtoIDResponse")]
        string FindtoID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/FindtoID", ReplyAction="http://tempuri.org/ISIU/FindtoIDResponse")]
        System.Threading.Tasks.Task<string> FindtoIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawPrepare")]
        void DrawPrepare(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawPrepare")]
        System.Threading.Tasks.Task DrawPrepareAsync(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Draw")]
        void Draw(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Draw")]
        System.Threading.Tasks.Task DrawAsync(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawEnd")]
        void DrawEnd(string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawEnd")]
        System.Threading.Tasks.Task DrawEndAsync(string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MovePage")]
        void MovePage(string page);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MovePage")]
        System.Threading.Tasks.Task MovePageAsync(string page);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Leave")]
        void Leave();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Leave")]
        System.Threading.Tasks.Task LeaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Files", ReplyAction="http://tempuri.org/ISIU/FilesResponse")]
        string[] Files(int nflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Files", ReplyAction="http://tempuri.org/ISIU/FilesResponse")]
        System.Threading.Tasks.Task<string[]> FilesAsync(int nflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WriteSugesstSubmissionList", ReplyAction="http://tempuri.org/ISIU/WriteSugesstSubmissionListResponse")]
        bool WriteSugesstSubmissionList(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WriteSugesstSubmissionList", ReplyAction="http://tempuri.org/ISIU/WriteSugesstSubmissionListResponse")]
        System.Threading.Tasks.Task<bool> WriteSugesstSubmissionListAsync(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSugesstSubmissionList", ReplyAction="http://tempuri.org/ISIU/ReadSugesstSubmissionListResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] ReadSugesstSubmissionList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSugesstSubmissionList", ReplyAction="http://tempuri.org/ISIU/ReadSugesstSubmissionListResponse")]
        System.Threading.Tasks.Task<object[]> ReadSugesstSubmissionListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteSubmission", ReplyAction="http://tempuri.org/ISIU/DeleteSubmissionResponse")]
        bool DeleteSubmission(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteSubmission", ReplyAction="http://tempuri.org/ISIU/DeleteSubmissionResponse")]
        System.Threading.Tasks.Task<bool> DeleteSubmissionAsync(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WriteSubmissionList", ReplyAction="http://tempuri.org/ISIU/WriteSubmissionListResponse")]
        bool WriteSubmissionList(string teacher, string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WriteSubmissionList", ReplyAction="http://tempuri.org/ISIU/WriteSubmissionListResponse")]
        System.Threading.Tasks.Task<bool> WriteSubmissionListAsync(string teacher, string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionList", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionListResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] ReadSubmissionList(string teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionList", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionListResponse")]
        System.Threading.Tasks.Task<object[]> ReadSubmissionListAsync(string teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteSumitSubmission", ReplyAction="http://tempuri.org/ISIU/DeleteSumitSubmissionResponse")]
        bool DeleteSumitSubmission(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteSumitSubmission", ReplyAction="http://tempuri.org/ISIU/DeleteSumitSubmissionResponse")]
        System.Threading.Tasks.Task<bool> DeleteSumitSubmissionAsync(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WritePersonalStudentSubmissionXml", ReplyAction="http://tempuri.org/ISIU/WritePersonalStudentSubmissionXmlResponse")]
        bool WritePersonalStudentSubmissionXml(string teacher, string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/WritePersonalStudentSubmissionXml", ReplyAction="http://tempuri.org/ISIU/WritePersonalStudentSubmissionXmlResponse")]
        System.Threading.Tasks.Task<bool> WritePersonalStudentSubmissionXmlAsync(string teacher, string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadPersonalStudentSubmissionXml", ReplyAction="http://tempuri.org/ISIU/ReadPersonalStudentSubmissionXmlResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] ReadPersonalStudentSubmissionXml(string teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadPersonalStudentSubmissionXml", ReplyAction="http://tempuri.org/ISIU/ReadPersonalStudentSubmissionXmlResponse")]
        System.Threading.Tasks.Task<object[]> ReadPersonalStudentSubmissionXmlAsync(string teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeletePersonalStudentInfo", ReplyAction="http://tempuri.org/ISIU/DeletePersonalStudentInfoResponse")]
        bool DeletePersonalStudentInfo(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeletePersonalStudentInfo", ReplyAction="http://tempuri.org/ISIU/DeletePersonalStudentInfoResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonalStudentInfoAsync(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/BoardDeleteFile", ReplyAction="http://tempuri.org/ISIU/BoardDeleteFileResponse")]
        bool BoardDeleteFile(string filename, int flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/BoardDeleteFile", ReplyAction="http://tempuri.org/ISIU/BoardDeleteFileResponse")]
        System.Threading.Tasks.Task<bool> BoardDeleteFileAsync(string filename, int flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionBoardWrite", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionBoardWriteResponse")]
        bool ReadSubmissionBoardWrite(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionBoardWrite", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionBoardWriteResponse")]
        System.Threading.Tasks.Task<bool> ReadSubmissionBoardWriteAsync(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionBoardCheck", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionBoardCheckResponse")]
        bool ReadSubmissionBoardCheck(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadSubmissionBoardCheck", ReplyAction="http://tempuri.org/ISIU/ReadSubmissionBoardCheckResponse")]
        System.Threading.Tasks.Task<bool> ReadSubmissionBoardCheckAsync(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteFile", ReplyAction="http://tempuri.org/ISIU/DeleteFileResponse")]
        void DeleteFile(string virtualPath, int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteFile", ReplyAction="http://tempuri.org/ISIU/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string virtualPath, int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/List", ReplyAction="http://tempuri.org/ISIU/ListResponse")]
        UserWallPaper.ServiceReference1.StorageFileInfo[] List(string virtualPath, int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/List", ReplyAction="http://tempuri.org/ISIU/ListResponse")]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.StorageFileInfo[]> ListAsync(string virtualPath, int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/GetUploadedXmlInfo", ReplyAction="http://tempuri.org/ISIU/GetUploadedXmlInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] GetUploadedXmlInfo(int flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/GetUploadedXmlInfo", ReplyAction="http://tempuri.org/ISIU/GetUploadedXmlInfoResponse")]
        System.Threading.Tasks.Task<object[]> GetUploadedXmlInfoAsync(int flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/StudentBoardWrite", ReplyAction="http://tempuri.org/ISIU/StudentBoardWriteResponse")]
        bool StudentBoardWrite(string[] SubmissionInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/StudentBoardWrite", ReplyAction="http://tempuri.org/ISIU/StudentBoardWriteResponse")]
        System.Threading.Tasks.Task<bool> StudentBoardWriteAsync(string[] SubmissionInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/StudentBoardRead", ReplyAction="http://tempuri.org/ISIU/StudentBoardReadResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] StudentBoardRead();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/StudentBoardRead", ReplyAction="http://tempuri.org/ISIU/StudentBoardReadResponse")]
        System.Threading.Tasks.Task<object[]> StudentBoardReadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteStudentBoard", ReplyAction="http://tempuri.org/ISIU/DeleteStudentBoardResponse")]
        bool DeleteStudentBoard(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/DeleteStudentBoard", ReplyAction="http://tempuri.org/ISIU/DeleteStudentBoardResponse")]
        System.Threading.Tasks.Task<bool> DeleteStudentBoardAsync(string id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadStudentBoardWrite", ReplyAction="http://tempuri.org/ISIU/ReadStudentBoardWriteResponse")]
        bool ReadStudentBoardWrite(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadStudentBoardWrite", ReplyAction="http://tempuri.org/ISIU/ReadStudentBoardWriteResponse")]
        System.Threading.Tasks.Task<bool> ReadStudentBoardWriteAsync(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadStudentBoardCheck", ReplyAction="http://tempuri.org/ISIU/ReadStudentBoardCheckResponse")]
        bool ReadStudentBoardCheck(string id, string title, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/ReadStudentBoardCheck", ReplyAction="http://tempuri.org/ISIU/ReadStudentBoardCheckResponse")]
        System.Threading.Tasks.Task<bool> ReadStudentBoardCheckAsync(string id, string title, string date);
        
        // CODEGEN: PutFile 작업이 RPC 또는 문서 래핑이 아니므로 메시지 계약을 생성합니다.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/PutFile", ReplyAction="http://tempuri.org/ISIU/PutFileResponse")]
        UserWallPaper.ServiceReference1.PutFileResponse PutFile(UserWallPaper.ServiceReference1.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/PutFile", ReplyAction="http://tempuri.org/ISIU/PutFileResponse")]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.PutFileResponse> PutFileAsync(UserWallPaper.ServiceReference1.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Memo")]
        void Memo(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Memo")]
        System.Threading.Tasks.Task MemoAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MemoText")]
        void MemoText(string id, string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MemoText")]
        System.Threading.Tasks.Task MemoTextAsync(string id, string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Erase")]
        void Erase(string type, string page, double left, double top, System.Windows.Point[] pts);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Erase")]
        System.Threading.Tasks.Task EraseAsync(string type, string page, double left, double top, System.Windows.Point[] pts);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/SendScroll")]
        void SendScroll(double offset);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/SendScroll")]
        System.Threading.Tasks.Task SendScrollAsync(double offset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/NoUSBWrite", ReplyAction="http://tempuri.org/ISIU/NoUSBWriteResponse")]
        bool NoUSBWrite(string[] noUSBinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/NoUSBWrite", ReplyAction="http://tempuri.org/ISIU/NoUSBWriteResponse")]
        System.Threading.Tasks.Task<bool> NoUSBWriteAsync(string[] noUSBinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/NoUSBRead", ReplyAction="http://tempuri.org/ISIU/NoUSBReadResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        object[] NoUSBRead();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/NoUSBRead", ReplyAction="http://tempuri.org/ISIU/NoUSBReadResponse")]
        System.Threading.Tasks.Task<object[]> NoUSBReadAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/SendRequest")]
        void SendRequest(string to, string file);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/SendRequest")]
        System.Threading.Tasks.Task SendRequestAsync(string to, string file);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISIUCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/Receive")]
        void Receive(string senderName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/UserEnter")]
        void UserEnter(string serial, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/Uploaded", ReplyAction="http://tempuri.org/ISIU/UploadedResponse")]
        void Uploaded();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/PrepareReceive")]
        void PrepareReceive(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawReceive")]
        void DrawReceive(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/DrawEndReceive")]
        void DrawEndReceive(string type, string id, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/UserLeave")]
        void UserLeave(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/ReceivePage")]
        void ReceivePage(string page, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MemoReceive")]
        void MemoReceive(string id, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/MemoTextReceive")]
        void MemoTextReceive(string id, string text, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/EraseReceive")]
        void EraseReceive(string type, string page, double left, double top, System.Windows.Point[] pts, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISIU/ReceiveScroll")]
        void ReceiveScroll(double offset, string bookname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIU/SendResponse", ReplyAction="http://tempuri.org/ISIU/SendResponseResponse")]
        void SendResponse(string sender, string file);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string VirtualPath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int pathflag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream DataStream;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(long Length, string VirtualPath, int pathflag, System.IO.Stream DataStream) {
            this.Length = Length;
            this.VirtualPath = VirtualPath;
            this.pathflag = pathflag;
            this.DataStream = DataStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PutFileResponse {
        
        public PutFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISIUChannel : UserWallPaper.ServiceReference1.ISIU, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SIUClient : System.ServiceModel.DuplexClientBase<UserWallPaper.ServiceReference1.ISIU>, UserWallPaper.ServiceReference1.ISIU {
        
        public SIUClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SIUClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SIUClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SIUClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SIUClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] Join(string serial) {
            return base.Channel.Join(serial);
        }
        
        public System.Threading.Tasks.Task<string[]> JoinAsync(string serial) {
            return base.Channel.JoinAsync(serial);
        }
        
        public string MyType(string serial) {
            return base.Channel.MyType(serial);
        }
        
        public System.Threading.Tasks.Task<string> MyTypeAsync(string serial) {
            return base.Channel.MyTypeAsync(serial);
        }
        
        public string MyName(string serial) {
            return base.Channel.MyName(serial);
        }
        
        public System.Threading.Tasks.Task<string> MyNameAsync(string serial) {
            return base.Channel.MyNameAsync(serial);
        }
        
        public void MyBook(string bookname) {
            base.Channel.MyBook(bookname);
        }
        
        public System.Threading.Tasks.Task MyBookAsync(string bookname) {
            return base.Channel.MyBookAsync(bookname);
        }
        
        public void Say(string msg) {
            base.Channel.Say(msg);
        }
        
        public System.Threading.Tasks.Task SayAsync(string msg) {
            return base.Channel.SayAsync(msg);
        }
        
        public bool Save(string serial, string id, string pw, string name, string sort, string number) {
            return base.Channel.Save(serial, id, pw, name, sort, number);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAsync(string serial, string id, string pw, string name, string sort, string number) {
            return base.Channel.SaveAsync(serial, id, pw, name, sort, number);
        }
        
        public bool Find(string serial) {
            return base.Channel.Find(serial);
        }
        
        public System.Threading.Tasks.Task<bool> FindAsync(string serial) {
            return base.Channel.FindAsync(serial);
        }
        
        public string FindName(string serial) {
            return base.Channel.FindName(serial);
        }
        
        public System.Threading.Tasks.Task<string> FindNameAsync(string serial) {
            return base.Channel.FindNameAsync(serial);
        }
        
        public string FindType(string serial) {
            return base.Channel.FindType(serial);
        }
        
        public System.Threading.Tasks.Task<string> FindTypeAsync(string serial) {
            return base.Channel.FindTypeAsync(serial);
        }
        
        public string FindUserInfo(string serial) {
            return base.Channel.FindUserInfo(serial);
        }
        
        public System.Threading.Tasks.Task<string> FindUserInfoAsync(string serial) {
            return base.Channel.FindUserInfoAsync(serial);
        }
        
        public bool Rejoin(string serial, string id, string pw) {
            return base.Channel.Rejoin(serial, id, pw);
        }
        
        public System.Threading.Tasks.Task<bool> RejoinAsync(string serial, string id, string pw) {
            return base.Channel.RejoinAsync(serial, id, pw);
        }
        
        public bool Login(string id, string pw) {
            return base.Channel.Login(id, pw);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string id, string pw) {
            return base.Channel.LoginAsync(id, pw);
        }
        
        public string FindtoID(string id) {
            return base.Channel.FindtoID(id);
        }
        
        public System.Threading.Tasks.Task<string> FindtoIDAsync(string id) {
            return base.Channel.FindtoIDAsync(id);
        }
        
        public void DrawPrepare(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize) {
            base.Channel.DrawPrepare(type, color, pt, fontsize);
        }
        
        public System.Threading.Tasks.Task DrawPrepareAsync(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize) {
            return base.Channel.DrawPrepareAsync(type, color, pt, fontsize);
        }
        
        public void Draw(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize) {
            base.Channel.Draw(type, color, pt, fontsize);
        }
        
        public System.Threading.Tasks.Task DrawAsync(string type, System.Windows.Media.Color color, System.Windows.Point pt, int fontsize) {
            return base.Channel.DrawAsync(type, color, pt, fontsize);
        }
        
        public void DrawEnd(string type, string id) {
            base.Channel.DrawEnd(type, id);
        }
        
        public System.Threading.Tasks.Task DrawEndAsync(string type, string id) {
            return base.Channel.DrawEndAsync(type, id);
        }
        
        public void MovePage(string page) {
            base.Channel.MovePage(page);
        }
        
        public System.Threading.Tasks.Task MovePageAsync(string page) {
            return base.Channel.MovePageAsync(page);
        }
        
        public void Leave() {
            base.Channel.Leave();
        }
        
        public System.Threading.Tasks.Task LeaveAsync() {
            return base.Channel.LeaveAsync();
        }
        
        public string[] Files(int nflag) {
            return base.Channel.Files(nflag);
        }
        
        public System.Threading.Tasks.Task<string[]> FilesAsync(int nflag) {
            return base.Channel.FilesAsync(nflag);
        }
        
        public bool WriteSugesstSubmissionList(string[] str) {
            return base.Channel.WriteSugesstSubmissionList(str);
        }
        
        public System.Threading.Tasks.Task<bool> WriteSugesstSubmissionListAsync(string[] str) {
            return base.Channel.WriteSugesstSubmissionListAsync(str);
        }
        
        public object[] ReadSugesstSubmissionList() {
            return base.Channel.ReadSugesstSubmissionList();
        }
        
        public System.Threading.Tasks.Task<object[]> ReadSugesstSubmissionListAsync() {
            return base.Channel.ReadSugesstSubmissionListAsync();
        }
        
        public bool DeleteSubmission(string id, string title) {
            return base.Channel.DeleteSubmission(id, title);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSubmissionAsync(string id, string title) {
            return base.Channel.DeleteSubmissionAsync(id, title);
        }
        
        public bool WriteSubmissionList(string teacher, string[] str) {
            return base.Channel.WriteSubmissionList(teacher, str);
        }
        
        public System.Threading.Tasks.Task<bool> WriteSubmissionListAsync(string teacher, string[] str) {
            return base.Channel.WriteSubmissionListAsync(teacher, str);
        }
        
        public object[] ReadSubmissionList(string teacher) {
            return base.Channel.ReadSubmissionList(teacher);
        }
        
        public System.Threading.Tasks.Task<object[]> ReadSubmissionListAsync(string teacher) {
            return base.Channel.ReadSubmissionListAsync(teacher);
        }
        
        public bool DeleteSumitSubmission(string id, string title) {
            return base.Channel.DeleteSumitSubmission(id, title);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSumitSubmissionAsync(string id, string title) {
            return base.Channel.DeleteSumitSubmissionAsync(id, title);
        }
        
        public bool WritePersonalStudentSubmissionXml(string teacher, string[] str) {
            return base.Channel.WritePersonalStudentSubmissionXml(teacher, str);
        }
        
        public System.Threading.Tasks.Task<bool> WritePersonalStudentSubmissionXmlAsync(string teacher, string[] str) {
            return base.Channel.WritePersonalStudentSubmissionXmlAsync(teacher, str);
        }
        
        public object[] ReadPersonalStudentSubmissionXml(string teacher) {
            return base.Channel.ReadPersonalStudentSubmissionXml(teacher);
        }
        
        public System.Threading.Tasks.Task<object[]> ReadPersonalStudentSubmissionXmlAsync(string teacher) {
            return base.Channel.ReadPersonalStudentSubmissionXmlAsync(teacher);
        }
        
        public bool DeletePersonalStudentInfo(string id, string title) {
            return base.Channel.DeletePersonalStudentInfo(id, title);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonalStudentInfoAsync(string id, string title) {
            return base.Channel.DeletePersonalStudentInfoAsync(id, title);
        }
        
        public bool BoardDeleteFile(string filename, int flag) {
            return base.Channel.BoardDeleteFile(filename, flag);
        }
        
        public System.Threading.Tasks.Task<bool> BoardDeleteFileAsync(string filename, int flag) {
            return base.Channel.BoardDeleteFileAsync(filename, flag);
        }
        
        public bool ReadSubmissionBoardWrite(string id, string title, string date) {
            return base.Channel.ReadSubmissionBoardWrite(id, title, date);
        }
        
        public System.Threading.Tasks.Task<bool> ReadSubmissionBoardWriteAsync(string id, string title, string date) {
            return base.Channel.ReadSubmissionBoardWriteAsync(id, title, date);
        }
        
        public bool ReadSubmissionBoardCheck(string id, string title, string date) {
            return base.Channel.ReadSubmissionBoardCheck(id, title, date);
        }
        
        public System.Threading.Tasks.Task<bool> ReadSubmissionBoardCheckAsync(string id, string title, string date) {
            return base.Channel.ReadSubmissionBoardCheckAsync(id, title, date);
        }
        
        public void DeleteFile(string virtualPath, int pathflag) {
            base.Channel.DeleteFile(virtualPath, pathflag);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string virtualPath, int pathflag) {
            return base.Channel.DeleteFileAsync(virtualPath, pathflag);
        }
        
        public UserWallPaper.ServiceReference1.StorageFileInfo[] List(string virtualPath, int pathflag) {
            return base.Channel.List(virtualPath, pathflag);
        }
        
        public System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.StorageFileInfo[]> ListAsync(string virtualPath, int pathflag) {
            return base.Channel.ListAsync(virtualPath, pathflag);
        }
        
        public object[] GetUploadedXmlInfo(int flag) {
            return base.Channel.GetUploadedXmlInfo(flag);
        }
        
        public System.Threading.Tasks.Task<object[]> GetUploadedXmlInfoAsync(int flag) {
            return base.Channel.GetUploadedXmlInfoAsync(flag);
        }
        
        public bool StudentBoardWrite(string[] SubmissionInfo) {
            return base.Channel.StudentBoardWrite(SubmissionInfo);
        }
        
        public System.Threading.Tasks.Task<bool> StudentBoardWriteAsync(string[] SubmissionInfo) {
            return base.Channel.StudentBoardWriteAsync(SubmissionInfo);
        }
        
        public object[] StudentBoardRead() {
            return base.Channel.StudentBoardRead();
        }
        
        public System.Threading.Tasks.Task<object[]> StudentBoardReadAsync() {
            return base.Channel.StudentBoardReadAsync();
        }
        
        public bool DeleteStudentBoard(string id, string title) {
            return base.Channel.DeleteStudentBoard(id, title);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStudentBoardAsync(string id, string title) {
            return base.Channel.DeleteStudentBoardAsync(id, title);
        }
        
        public bool ReadStudentBoardWrite(string id, string title, string date) {
            return base.Channel.ReadStudentBoardWrite(id, title, date);
        }
        
        public System.Threading.Tasks.Task<bool> ReadStudentBoardWriteAsync(string id, string title, string date) {
            return base.Channel.ReadStudentBoardWriteAsync(id, title, date);
        }
        
        public bool ReadStudentBoardCheck(string id, string title, string date) {
            return base.Channel.ReadStudentBoardCheck(id, title, date);
        }
        
        public System.Threading.Tasks.Task<bool> ReadStudentBoardCheckAsync(string id, string title, string date) {
            return base.Channel.ReadStudentBoardCheckAsync(id, title, date);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UserWallPaper.ServiceReference1.PutFileResponse UserWallPaper.ServiceReference1.ISIU.PutFile(UserWallPaper.ServiceReference1.FileUploadMessage request) {
            return base.Channel.PutFile(request);
        }
        
        public void PutFile(long Length, string VirtualPath, int pathflag, System.IO.Stream DataStream) {
            UserWallPaper.ServiceReference1.FileUploadMessage inValue = new UserWallPaper.ServiceReference1.FileUploadMessage();
            inValue.Length = Length;
            inValue.VirtualPath = VirtualPath;
            inValue.pathflag = pathflag;
            inValue.DataStream = DataStream;
            UserWallPaper.ServiceReference1.PutFileResponse retVal = ((UserWallPaper.ServiceReference1.ISIU)(this)).PutFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.PutFileResponse> UserWallPaper.ServiceReference1.ISIU.PutFileAsync(UserWallPaper.ServiceReference1.FileUploadMessage request) {
            return base.Channel.PutFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.PutFileResponse> PutFileAsync(long Length, string VirtualPath, int pathflag, System.IO.Stream DataStream) {
            UserWallPaper.ServiceReference1.FileUploadMessage inValue = new UserWallPaper.ServiceReference1.FileUploadMessage();
            inValue.Length = Length;
            inValue.VirtualPath = VirtualPath;
            inValue.pathflag = pathflag;
            inValue.DataStream = DataStream;
            return ((UserWallPaper.ServiceReference1.ISIU)(this)).PutFileAsync(inValue);
        }
        
        public void Memo(string id) {
            base.Channel.Memo(id);
        }
        
        public System.Threading.Tasks.Task MemoAsync(string id) {
            return base.Channel.MemoAsync(id);
        }
        
        public void MemoText(string id, string text) {
            base.Channel.MemoText(id, text);
        }
        
        public System.Threading.Tasks.Task MemoTextAsync(string id, string text) {
            return base.Channel.MemoTextAsync(id, text);
        }
        
        public void Erase(string type, string page, double left, double top, System.Windows.Point[] pts) {
            base.Channel.Erase(type, page, left, top, pts);
        }
        
        public System.Threading.Tasks.Task EraseAsync(string type, string page, double left, double top, System.Windows.Point[] pts) {
            return base.Channel.EraseAsync(type, page, left, top, pts);
        }
        
        public void SendScroll(double offset) {
            base.Channel.SendScroll(offset);
        }
        
        public System.Threading.Tasks.Task SendScrollAsync(double offset) {
            return base.Channel.SendScrollAsync(offset);
        }
        
        public bool NoUSBWrite(string[] noUSBinfo) {
            return base.Channel.NoUSBWrite(noUSBinfo);
        }
        
        public System.Threading.Tasks.Task<bool> NoUSBWriteAsync(string[] noUSBinfo) {
            return base.Channel.NoUSBWriteAsync(noUSBinfo);
        }
        
        public object[] NoUSBRead() {
            return base.Channel.NoUSBRead();
        }
        
        public System.Threading.Tasks.Task<object[]> NoUSBReadAsync() {
            return base.Channel.NoUSBReadAsync();
        }
        
        public void SendRequest(string to, string file) {
            base.Channel.SendRequest(to, file);
        }
        
        public System.Threading.Tasks.Task SendRequestAsync(string to, string file) {
            return base.Channel.SendRequestAsync(to, file);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITransfer")]
    public interface ITransfer {
        
        // CODEGEN: UploadFile 작업이 RPC 또는 문서 래핑이 아니므로 메시지 계약을 생성합니다.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/UploadFile", ReplyAction="http://tempuri.org/ITransfer/UploadFileResponse")]
        UserWallPaper.ServiceReference1.UploadFileResponse UploadFile(UserWallPaper.ServiceReference1.ResponseFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/UploadFile", ReplyAction="http://tempuri.org/ITransfer/UploadFileResponse")]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.UploadFileResponse> UploadFileAsync(UserWallPaper.ServiceReference1.ResponseFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetFile", ReplyAction="http://tempuri.org/ITransfer/GetFileResponse")]
        System.IO.Stream GetFile(string virtualPath, int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetFile", ReplyAction="http://tempuri.org/ITransfer/GetFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync(string virtualPath, int pathflag);
        
        // CODEGEN: RequestFile 메시지의 래퍼 이름(RequestFile)이 기본값(DownloadFile)과 일치하지 않으므로 메시지 계약을 생성합니다.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/DownloadFile", ReplyAction="http://tempuri.org/ITransfer/DownloadFileResponse")]
        UserWallPaper.ServiceReference1.ResponseMultiFile DownloadFile(UserWallPaper.ServiceReference1.RequestFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/DownloadFile", ReplyAction="http://tempuri.org/ITransfer/DownloadFileResponse")]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> DownloadFileAsync(UserWallPaper.ServiceReference1.RequestFile request);
        
        // CODEGEN: RequestFiles 메시지의 래퍼 이름(RequestFiles)이 기본값(DownloadFiles)과 일치하지 않으므로 메시지 계약을 생성합니다.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/DownloadFiles", ReplyAction="http://tempuri.org/ITransfer/DownloadFilesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Point[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(UserWallPaper.ServiceReference1.StorageFileInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Windows.Media.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        UserWallPaper.ServiceReference1.ResponseMultiFile DownloadFiles(UserWallPaper.ServiceReference1.RequestFiles request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/DownloadFiles", ReplyAction="http://tempuri.org/ITransfer/DownloadFilesResponse")]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> DownloadFilesAsync(UserWallPaper.ServiceReference1.RequestFiles request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetTotalSize", ReplyAction="http://tempuri.org/ITransfer/GetTotalSizeResponse")]
        long GetTotalSize(int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetTotalSize", ReplyAction="http://tempuri.org/ITransfer/GetTotalSizeResponse")]
        System.Threading.Tasks.Task<long> GetTotalSizeAsync(int pathflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetTotalFileSize", ReplyAction="http://tempuri.org/ITransfer/GetTotalFileSizeResponse")]
        long GetTotalFileSize(int pathflag, string[] filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransfer/GetTotalFileSize", ReplyAction="http://tempuri.org/ITransfer/GetTotalFileSizeResponse")]
        System.Threading.Tasks.Task<long> GetTotalFileSizeAsync(int pathflag, string[] filepath);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResponseFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResponseFile {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long byteStart;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int pathflag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public ResponseFile() {
        }
        
        public ResponseFile(string FileName, long Length, long byteStart, int pathflag, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.byteStart = byteStart;
            this.pathflag = pathflag;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestFile {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int idx;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int pathflag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long byteStart;
        
        public RequestFile() {
        }
        
        public RequestFile(int idx, int pathflag, string FileName, long byteStart) {
            this.idx = idx;
            this.pathflag = pathflag;
            this.FileName = FileName;
            this.byteStart = byteStart;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResponseMultiFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResponseMultiFile {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long byteStart;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public ResponseMultiFile() {
        }
        
        public ResponseMultiFile(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.byteStart = byteStart;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestFiles", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestFiles {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public object[] FilePath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int idx;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int pathflag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long byteStart;
        
        public RequestFiles() {
        }
        
        public RequestFiles(object[] FilePath, int idx, int pathflag, string FileName, long byteStart) {
            this.FilePath = FilePath;
            this.idx = idx;
            this.pathflag = pathflag;
            this.FileName = FileName;
            this.byteStart = byteStart;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferChannel : UserWallPaper.ServiceReference1.ITransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferClient : System.ServiceModel.ClientBase<UserWallPaper.ServiceReference1.ITransfer>, UserWallPaper.ServiceReference1.ITransfer {
        
        public TransferClient() {
        }
        
        public TransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UserWallPaper.ServiceReference1.UploadFileResponse UserWallPaper.ServiceReference1.ITransfer.UploadFile(UserWallPaper.ServiceReference1.ResponseFile request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, long byteStart, int pathflag, System.IO.Stream FileByteStream) {
            UserWallPaper.ServiceReference1.ResponseFile inValue = new UserWallPaper.ServiceReference1.ResponseFile();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.byteStart = byteStart;
            inValue.pathflag = pathflag;
            inValue.FileByteStream = FileByteStream;
            UserWallPaper.ServiceReference1.UploadFileResponse retVal = ((UserWallPaper.ServiceReference1.ITransfer)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.UploadFileResponse> UserWallPaper.ServiceReference1.ITransfer.UploadFileAsync(UserWallPaper.ServiceReference1.ResponseFile request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.UploadFileResponse> UploadFileAsync(string FileName, long Length, long byteStart, int pathflag, System.IO.Stream FileByteStream) {
            UserWallPaper.ServiceReference1.ResponseFile inValue = new UserWallPaper.ServiceReference1.ResponseFile();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.byteStart = byteStart;
            inValue.pathflag = pathflag;
            inValue.FileByteStream = FileByteStream;
            return ((UserWallPaper.ServiceReference1.ITransfer)(this)).UploadFileAsync(inValue);
        }
        
        public System.IO.Stream GetFile(string virtualPath, int pathflag) {
            return base.Channel.GetFile(virtualPath, pathflag);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync(string virtualPath, int pathflag) {
            return base.Channel.GetFileAsync(virtualPath, pathflag);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UserWallPaper.ServiceReference1.ResponseMultiFile UserWallPaper.ServiceReference1.ITransfer.DownloadFile(UserWallPaper.ServiceReference1.RequestFile request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(int idx, int pathflag, ref string FileName, ref long byteStart, out System.IO.Stream FileByteStream) {
            UserWallPaper.ServiceReference1.RequestFile inValue = new UserWallPaper.ServiceReference1.RequestFile();
            inValue.idx = idx;
            inValue.pathflag = pathflag;
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            UserWallPaper.ServiceReference1.ResponseMultiFile retVal = ((UserWallPaper.ServiceReference1.ITransfer)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            byteStart = retVal.byteStart;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> UserWallPaper.ServiceReference1.ITransfer.DownloadFileAsync(UserWallPaper.ServiceReference1.RequestFile request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> DownloadFileAsync(int idx, int pathflag, string FileName, long byteStart) {
            UserWallPaper.ServiceReference1.RequestFile inValue = new UserWallPaper.ServiceReference1.RequestFile();
            inValue.idx = idx;
            inValue.pathflag = pathflag;
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            return ((UserWallPaper.ServiceReference1.ITransfer)(this)).DownloadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UserWallPaper.ServiceReference1.ResponseMultiFile UserWallPaper.ServiceReference1.ITransfer.DownloadFiles(UserWallPaper.ServiceReference1.RequestFiles request) {
            return base.Channel.DownloadFiles(request);
        }
        
        public long DownloadFiles(object[] FilePath, int idx, int pathflag, ref string FileName, ref long byteStart, out System.IO.Stream FileByteStream) {
            UserWallPaper.ServiceReference1.RequestFiles inValue = new UserWallPaper.ServiceReference1.RequestFiles();
            inValue.FilePath = FilePath;
            inValue.idx = idx;
            inValue.pathflag = pathflag;
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            UserWallPaper.ServiceReference1.ResponseMultiFile retVal = ((UserWallPaper.ServiceReference1.ITransfer)(this)).DownloadFiles(inValue);
            FileName = retVal.FileName;
            byteStart = retVal.byteStart;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> UserWallPaper.ServiceReference1.ITransfer.DownloadFilesAsync(UserWallPaper.ServiceReference1.RequestFiles request) {
            return base.Channel.DownloadFilesAsync(request);
        }
        
        public System.Threading.Tasks.Task<UserWallPaper.ServiceReference1.ResponseMultiFile> DownloadFilesAsync(object[] FilePath, int idx, int pathflag, string FileName, long byteStart) {
            UserWallPaper.ServiceReference1.RequestFiles inValue = new UserWallPaper.ServiceReference1.RequestFiles();
            inValue.FilePath = FilePath;
            inValue.idx = idx;
            inValue.pathflag = pathflag;
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            return ((UserWallPaper.ServiceReference1.ITransfer)(this)).DownloadFilesAsync(inValue);
        }
        
        public long GetTotalSize(int pathflag) {
            return base.Channel.GetTotalSize(pathflag);
        }
        
        public System.Threading.Tasks.Task<long> GetTotalSizeAsync(int pathflag) {
            return base.Channel.GetTotalSizeAsync(pathflag);
        }
        
        public long GetTotalFileSize(int pathflag, string[] filepath) {
            return base.Channel.GetTotalFileSize(pathflag, filepath);
        }
        
        public System.Threading.Tasks.Task<long> GetTotalFileSizeAsync(int pathflag, string[] filepath) {
            return base.Channel.GetTotalFileSizeAsync(pathflag, filepath);
        }
    }
}
